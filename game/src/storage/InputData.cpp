/**
 * This class is used to store InputData.
 * It is passed to the game logic code like the GameManager and PlayerManager.
 * There it is used to change entities in the game.
 *
 * Created by maxim on 17-5-18.
 */

#include "InputData.h"
#include "Variables.h"

/**
 * Default constructor that initializes valid to false.
 * Initializes other variables to impossible values.
 * @param type - Type of input (0 = mouse, 1 = arrow keys, 2 = WASD, 3 = imove).
 */
InputData::InputData(inputType type) {
    this->valid = false;
    this->id = -1;
    this->playerX = -1.0;
    this->playerY = -1.0;
    this->frameTime = -1.f;
    this->type = type;
    this->spacePressed = false;
    this->kPressed = false;
    this->lPressed = false;
    this->jPressed = false;
}

// Getters

/**
 * Check whether the input is valid.
 * This can be used to check whether there was a real input detection during this frame.
 * If there was no input then the user of the object can decide to discard the object without using it.
 * @return valid - If the input is valid.
 */
bool InputData::isValid() const {
    return valid;
}

/**
 * Getter for the frame time.
 * Indicates the time that passed during this frame in seconds.
 * @return frameTime - Time passed in seconds.
 */
float InputData::getFrameTime() const {
    return frameTime;
}

/**
 * Getter for the x coordinate of the player.
 * @return playerX - X coordinate of the player.
 */
double InputData::getPlayerX() const {
    return playerX;
}

/**
 * Getter for the y coordinate of the player.
 * @return playerY - Y coordinate of the player.
 */
double InputData::getPlayerY() const {
    return playerY;
}

/**
 * Getter for the id of the InputData.
 * When running without IMOVE this Id has no real meaning, it is only used to identify players that use different
 * inputs like wasd, arrow keys or mouse.
 * When running with IMOVE these Ids match to the blob Ids generated by the IMOVE framework.
 * 
 * @return an int with the id of the InputData which should match to a Player id.
 */
int InputData::getId() const {
    return id;
}

// Setters

/**
 * Getter to know if the spacebar was pressed.
 * @return spacePressed - A boolean to confirm whether the spacebar was pressed.
 */
bool InputData::isSpacePressed() const {
    return spacePressed;
}

/**
 * Getter to know if the K key was pressed.
 * @return kPressed - A boolean to confirm whether the K key was pressed.
 */
bool InputData::isKPressed() const {
    return kPressed;
}

/**
 * Getter to know if the L key was pressed.
 * @return kPressed - A boolean to confirm whether the L key was pressed.
 */
bool InputData::isLPressed() const {
    return lPressed;
}

/**
 * Getter to know if the J key was pressed.
 * @return jPressed - A boolean to confirm whether the J key was pressed.
 */
bool InputData::isJPressed() const {
    return jPressed;
}

/**
 * Setter for the validity of the InputData.
 * Should be called when input is detected.
 */
void InputData::setValid() {
    InputData::valid = true;
}

/**
 * Sets the id of the player entity that is controlled by this InputData.
 * @param id - The id of the player that is to be controlled, can match IMOVE people ids.
 */
void InputData::setId(int id) {
    InputData::id = id;
}

/**
 * Setter for the frame time.
 * Indicates the time that passed during this frame in seconds.
 * @param frameTime - Time passed in seconds.
 */
void InputData::setFrameTime(float frameTime) {
    if (Variables::DEBUG_SLOWMO_MODE) {
        InputData::frameTime = static_cast<float>(frameTime * Variables::DEBUG_SLOWMO_FACTOR);
    } else {
        InputData::frameTime = frameTime;
    }
}

/**
 * Setter for the x coordinate of the player.
 * @param playerX - New x coordinate of the player.
 */
void InputData::setPlayerX(double playerX) {
    InputData::playerX = playerX;
}

/**
 * Setter for the y coordinate of the player.
 * @param playerY - New y coordinate of the player.
 */
void InputData::setPlayerY(double playerY) {
    InputData::playerY = playerY;
}

/**
 * Getter for the type of input (0 = mouse, 1 = arrow keys, 2 = WASD, 3 = imove)
 * @return type - Input type
 */
InputData::inputType InputData::getType() {
    return type;
}

/**
 * Setter for whether the spacebar is pressed.
 */
void InputData::pressSpace() {
    InputData::spacePressed = true;
}

/**
 * Setter for whether the K key is pressed, this is used for killing all players.
 */
void InputData::pressK() {
    InputData::kPressed = true;
}

/**
 * Setter for whether the L key is pressed, this is used for adding a player.
 */
void InputData::pressL() {
    InputData::lPressed = true;
}

/**
 * Setter for whether the J key is pressed, this is used for toggling debug mode.
 */
void InputData::pressJ() {
    InputData::jPressed = true;
}